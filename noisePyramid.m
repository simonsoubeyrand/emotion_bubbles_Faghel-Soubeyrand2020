function out = noisePyramid(varargin)global gloparif (length(glopar)~=2 & length(glopar)~=3)	s1 = sprintf('glopar{1} = size along the X and Y axis\nglopar{2} = std of one bubble in minimum number of cycles\n');	s2 = sprintf('Must be defined in the CID.\nglopar{3} = information about the stimulus: bits, min and max\n');	error([s1,s2]);endnBands=6;xSize = glopar{1}(1);ySize = glopar{1}(2);oneTrial = varargin{1};if (sum(oneTrial(2:nBands)) ~= Inf),	oneTrial = varargin{1};	rand('state', oneTrial(1));	theNoise=zeros(ySize,xSize,nBands-1);	for ii=1:(nBands-1),		nn=0;		tempRand = rand(ySize,xSize);		for jj=1:oneTrial(ii+1),			[scrap xMax]=max(max(tempRand));			[scrap yMax]=max(tempRand(:,xMax));			theNoise(yMax,xMax,ii)=theNoise(yMax,xMax,ii)+1;			tempRand(yMax,xMax)=0;		end	endelse	theNoise = zeros(ySize, xSize, nBands-1);endif (nargin == 1)	out = theNoise;	returnendanImage = varargin{2};if (sum(oneTrial(2:nBands)) ~= Inf),	[ySize, xSize] = size(anImage);	nPeriod=glopar{2}; nZero=2.18;	stdev = nPeriod * 2^(5);	maxHalfSize5 = round(stdev * nZero);	gauss5 = zeros(2*maxHalfSize5,2*maxHalfSize5);	[y,x] = meshgrid(-maxHalfSize5:maxHalfSize5,-maxHalfSize5:maxHalfSize5);	gauss5 = exp(-(x.^2/stdev^2)-(y.^2/stdev^2));	gauss5 = gauss5/max(gauss5(:));	clear x, y;	method = 'nearest';	stdev = nPeriod * 2^(4);	maxHalfSize4 = round(stdev * nZero);	gauss4 = double(imresize(gauss5,[(2*maxHalfSize4+1) (2*maxHalfSize4+1)], method));	stdev = nPeriod * 2^(3);	maxHalfSize3 = round(stdev * nZero);	gauss3 = double(imresize(gauss5,[(2*maxHalfSize3+1) (2*maxHalfSize3+1)], method));	stdev = nPeriod * 2^(2);	maxHalfSize2 = round(stdev * nZero);	gauss2 = double(imresize(gauss5,[(2*maxHalfSize2+1) (2*maxHalfSize2+1)], method));	stdev = nPeriod * 2^(1);	maxHalfSize1 = round(stdev * nZero);	gauss1 = double(imresize(gauss5,[(2*maxHalfSize1+1) (2*maxHalfSize1+1)], method));	fGauss=mkGaussian(11);	fGauss1=fGauss(:,1);	fGauss1=sqrt(2)*fGauss1/sum(fGauss1);	clear fGauss;	winPlane = double(zeros(ySize,xSize));	[pyr,pind] = buildLpyr(double(anImage),nBands,fGauss1);	stimulus = zeros(ySize,xSize);	for ii = 1:(nBands-1),			nameGauss = sprintf('gauss%d',ii);		nameMax = sprintf('maxHalfSize%d',ii);		temp = eval(nameMax);		tempPlane = zeros(ySize+temp-1,xSize+temp-1);		tempPlane = real(ifft2(fft2(eval(nameGauss),ySize+temp-1,xSize+temp-1).*fft2(theNoise(:,:,ii), ySize+temp-1, xSize+temp-1)));		winPlane = min(tempPlane(temp:ySize+temp-1,temp:xSize+temp-1), 1);		stimulus = stimulus + double(reconLpyr(pyr,pind,[ii],fGauss1).*winPlane);	end	theStimulus = (stimulus + double(reconLpyr(pyr,pind,[nBands],fGauss1)));else	theStimulus = anImage;end% ------------------------------------------------------------------------% -- 5.0 Output and infornation on the stimulusmmin = min(theStimulus(:))/256;mmax = max(theStimulus(:))/256; % we suppose that (1) images are scaled beetween 0 and 1 and (2) we used 256 gray level, i.e. max bits = 8bits = log2(floor((mmax-mmin)*256));glopar{3}(1) = bits;glopar{3}(2) = mmin;glopar{3}(3) = mmax;out = uint8(theStimulus);