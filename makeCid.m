function makeCid(varargin)% fileName, noiseFile, constants, data% MAKECID Creates a CID file called fileName. See READCID for a description of the format.% % See also XXX% % The Stat4Ci toolbox is free (http://mapageweb.umontreal.ca/gosselif/stat4ci.html); if you use % it in your research, please, cite us:%	Chauvin, A., Worsley, K. J., Schyns, P. G., Arguin, M. & Gosselin, F. (2004).  A sensitive %	statistical test for smooth classification images.% % Alan Chauvin & Frédéric Gosselin (frederic.gosselin@umontreal.ca), 20/08/2004% Add the the number of trialsin the constants sectionif (nargin == 2)	fileName = varargin{1};	cid = varargin{2};	info = cid.info;	noise = cid.noise;	constants = cid.constants;	dataLabels = cid.dataLabels;	data = cid.data;	[nn, mm] = size(data);	nnn = max([nn, mm]);	mmm = min([nn, mm]);	fid = fopen(fileName, 'w');	if (fid == -1)		error('Impossible to create file.')	end	fprintf(fid,'[INFORMATION]\n%s', info);	fprintf(fid,'[NOISE]\n%s', noise);		fprintf(fid,'[CONSTANTS]\n%s', constants);	fprintf(fid,'[DATA LABELS]');	for ii = 1:length(dataLabels),		fprintf(fid,'\n%s', dataLabels{ii});	endelseif (nargin == 4)	fileName = varargin{1};	noiseFile = varargin{2};	constants = varargin{3};	data = varargin{4};	fid = fopen(noiseFile, 'r');	noise = '';	while 1		oneLine = fgets(fid);		if ~isstr(oneLine), break, end		noise = [noise, oneLine];	end	fclose(fid);	fid = fopen(fileName, 'w');	if (fid == -1)		error('Impossible to create file.')	end	fprintf(fid,'[INFORMATION]\nReplace by free text such as this. Should contain the rationale, methods, and main results of the experiment. And other relevant information.\n\n');	fprintf(fid,'[NOISE]\n%s\n', noise);	[nn, mm] = size(data);	nnn = max([nn, mm]);	mmm = min([nn, mm]);	fprintf(fid,'[CONSTANTS]\nglobal glopar;\nglobal nbTrials;\nnbTrials = %d;\n%s\n\n', nnn, constants);	fprintf(fid,'[DATA LABELS]\nReplace by free text such as this. Should label all the data columns.\n\n');elseif (nargin == 6)	fileName = varargin{1};	info = varargin{2};	noiseFile = varargin{3};	constants = varargin{4};	dataLabels = varargin{5};	data = varargin{6};	fid = fopen(noiseFile, 'r');	noise = '';	while 1		oneLine = fgets(fid);		if ~isstr(oneLine), break, end		noise = [noise, oneLine]; 	end	fclose(fid);	fid = fopen(fileName, 'w');	if (fid == -1)		error('Impossible to create file.')	end	fprintf(fid,'[INFORMATION]\n%s\n\n', info);	fprintf(fid,'[NOISE]\n%s\n', noise);	[nn, mm] = size(data);	nnn = max([nn, mm]);	mmm = min([nn, mm]);	fprintf(fid,'[CONSTANTS]\nglobal glopar;\nglobal nbTrials;\nnbTrials = %d;\n%s\n\n', nnn, constants);	fprintf(fid,'[DATA LABELS]\n%s\n\n', dataLabels);endfprintf(fid,'[DATA]\n');printOneLine = ['fprintf(fid,''%d'];for ii = 2:mmm,	printOneLine = [printOneLine, '\t%d'];endprintOneLine = [printOneLine, '\n'', data(:,ii));'];for ii = 1:nnn,	eval(printOneLine);endfclose(fid);